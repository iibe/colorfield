"use strict";class HSLA{constructor(h=0,s=0,l=0,a=0){this.hue=h,this.saturation=s,this.lightness=l,this.alpha=a}static stringify({hue:hue,saturation:saturation,lightness:lightness,alpha:alpha}){return`hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`}static grayscale({lightness:lightness,alpha:alpha}){return`hsla(0, 0%, ${lightness}%, ${alpha})`}}class Particle{constructor(x=0,y=0,hsla=new HSLA){this.x=x,this.y=y,this.hsla=hsla,this.previous={x:x,y:y}}}const G3=1/6,fastFloor=x=>0|Math.floor(x),grad3=new Float64Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]);const n3d=function(random=Math.random){const perm=function(random){const tableSize=512,p=new Uint8Array(tableSize);for(let i=0;i<tableSize/2;i++)p[i]=i;for(let i=0;i<tableSize/2-1;i++){const r=i+~~(random()*(256-i)),aux=p[i];p[i]=p[r],p[r]=aux}for(let i=256;i<tableSize;i++)p[i]=p[i-256];return p}(random),permGrad3x=new Float64Array(perm).map((v=>grad3[v%12*3])),permGrad3y=new Float64Array(perm).map((v=>grad3[v%12*3+1])),permGrad3z=new Float64Array(perm).map((v=>grad3[v%12*3+2]));return function(x,y,z){let n0,n1,n2,n3;const s=.3333333333333333*(x+y+z),i=fastFloor(x+s),j=fastFloor(y+s),k=fastFloor(z+s),t=(i+j+k)*G3,x0=x-(i-t),y0=y-(j-t),z0=z-(k-t);let i1,j1,k1,i2,j2,k2;x0>=y0?y0>=z0?(i1=1,j1=0,k1=0,i2=1,j2=1,k2=0):x0>=z0?(i1=1,j1=0,k1=0,i2=1,j2=0,k2=1):(i1=0,j1=0,k1=1,i2=1,j2=0,k2=1):y0<z0?(i1=0,j1=0,k1=1,i2=0,j2=1,k2=1):x0<z0?(i1=0,j1=1,k1=0,i2=0,j2=1,k2=1):(i1=0,j1=1,k1=0,i2=1,j2=1,k2=0);const x1=x0-i1+G3,y1=y0-j1+G3,z1=z0-k1+G3,x2=x0-i2+2*G3,y2=y0-j2+2*G3,z2=z0-k2+2*G3,x3=x0-1+.5,y3=y0-1+.5,z3=z0-1+.5,ii=255&i,jj=255&j,kk=255&k;let t0=.6-x0*x0-y0*y0-z0*z0;if(t0<0)n0=0;else{const gi0=ii+perm[jj+perm[kk]];t0*=t0,n0=t0*t0*(permGrad3x[gi0]*x0+permGrad3y[gi0]*y0+permGrad3z[gi0]*z0)}let t1=.6-x1*x1-y1*y1-z1*z1;if(t1<0)n1=0;else{const gi1=ii+i1+perm[jj+j1+perm[kk+k1]];t1*=t1,n1=t1*t1*(permGrad3x[gi1]*x1+permGrad3y[gi1]*y1+permGrad3z[gi1]*z1)}let t2=.6-x2*x2-y2*y2-z2*z2;if(t2<0)n2=0;else{const gi2=ii+i2+perm[jj+j2+perm[kk+k2]];t2*=t2,n2=t2*t2*(permGrad3x[gi2]*x2+permGrad3y[gi2]*y2+permGrad3z[gi2]*z2)}let t3=.6-x3*x3-y3*y3-z3*z3;if(t3<0)n3=0;else{const gi3=ii+1+perm[jj+1+perm[kk+1]];t3*=t3,n3=t3*t3*(permGrad3x[gi3]*x3+permGrad3y[gi3]*y3+permGrad3z[gi3]*z3)}return 32*(n0+n1+n2+n3)}}();function getNoise3D(x,y,z){let amplitude=1,factor=1,sum=0;for(let i=1;i<4;i++)amplitude*=.5,sum+=amplitude*(n3d(x*factor,y*factor,z*factor)+1)*.5,factor*=2;return sum}class Colorfield{static range(min,max){return Math.floor(Math.random()*(max-min))+min}constructor(selector,options={}){if(this.options={colorMode:"hsla",colorIntensityMix:1,colorLightnessMix:1,colorOpacityMix:1,frameRange:[250,500],particleNumber:1e3,base:1e3,step:5,zOffsetStep:.001},this.particles=[],this.zOffset=0,!document.querySelector(selector))throw new Error(`#${selector} is not found`);switch(this.options=Object.assign(Object.assign({},this.options),options),this.validate("colorIntensityMix",0,1),this.validate("colorLightnessMix",0,1),this.validate("colorOpacityMix",0,1),this.validate("particleNumber",500,1e3),this.validate("base",500,1e3),this.validate("step",5,10),this.validate("zOffsetStep",5e-4,.01),this.options.colorMode){case"hsla":default:this.colorize=HSLA.stringify;break;case"grayscale":this.colorize=HSLA.grayscale}this.canvas=document.querySelector(selector),this.canvas.style.display="block",this.canvas.style.width="100%",this.canvas.style.height="100%",this.setCanvasDrawingBuffer(),this.ctx=this.canvas.getContext("2d"),this.ctx.lineWidth=.3,this.ctx.lineJoin="round",this.ctx.lineCap="round",this.frame={midpoint:{x:this.canvas.width/2,y:this.canvas.height/2},count:0,limit:Colorfield.range(...this.options.frameRange)};for(let index=0;index<this.options.particleNumber;index++)this.particles[index]=new Particle,this.setParticleProps(this.particles[index]);this.render(),window.addEventListener("resize",(()=>{this.rerender()})),this.canvas.addEventListener("click",(()=>{this.rerender()}))}validate(key,min,max){if(!(min<=this.options[key]&&this.options[key]<=max))throw new Error(`Error: this.config.${key} value from ${min} to ${max}]`)}setCanvasDrawingBuffer(){const cssWidth=this.canvas.clientWidth,cssHeight=this.canvas.clientHeight,displayWidth=Math.round(cssWidth*Colorfield.dpr),displayHeight=Math.round(cssHeight*Colorfield.dpr);this.canvas.width===displayWidth&&this.canvas.height===displayHeight||(this.canvas.width=displayWidth,this.canvas.height=displayHeight)}setParticleProps(particle){particle.x=particle.previous.x=this.canvas.width*Math.random(),particle.y=particle.previous.y=this.canvas.height*Math.random();const atan2=Math.atan2(this.frame.midpoint.y-particle.y,this.frame.midpoint.x-particle.x);particle.hsla.hue=180*atan2/Math.PI,particle.hsla.saturation=100*this.options.colorIntensityMix,particle.hsla.lightness=50*this.options.colorLightnessMix,particle.hsla.alpha=0}rerender(){this.setCanvasDrawingBuffer(),this.ctx=this.canvas.getContext("2d"),this.ctx.lineWidth=.3,this.ctx.lineJoin="round",this.ctx.lineCap="round",this.frame.midpoint={x:this.canvas.width/2,y:this.canvas.height/2},this.frame.count>this.frame.limit?(this.frame.count=0,this.frame.limit=Colorfield.range(...this.options.frameRange),this.render()):(this.frame.count=0,this.frame.limit=Colorfield.range(...this.options.frameRange))}render(){if(!(this.frame.count>this.frame.limit)){this.frame.count++;for(let i=0;i<this.options.particleNumber;i++){const particle=this.particles[i];particle.previous.x=particle.x,particle.previous.y=particle.y;const noise=getNoise3D(particle.x/this.options.base*1.75,particle.y/this.options.base*1.75,this.zOffset),angle=6*Math.PI*noise;particle.x+=Math.cos(angle)*this.options.step,particle.y+=Math.sin(angle)*this.options.step,particle.hsla.alpha<1&&(particle.hsla.alpha+=.003*this.options.colorOpacityMix),this.ctx.beginPath(),this.ctx.strokeStyle=this.colorize(particle.hsla),this.ctx.moveTo(particle.previous.x,particle.previous.y),this.ctx.lineTo(particle.x,particle.y),this.ctx.stroke(),(particle.x<0||particle.y<0||particle.x>this.canvas.width||particle.y>this.canvas.height)&&this.setParticleProps(particle)}this.zOffset+=this.options.zOffsetStep,window.requestAnimationFrame(this.render.bind(this))}}get self(){return this}get config(){return this.options}}Colorfield.dpr=window.devicePixelRatio||1,module.exports=Colorfield;
//# sourceMappingURL=colorfield.min.js.map
